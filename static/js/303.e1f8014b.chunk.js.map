{"version":3,"file":"static/js/303.e1f8014b.chunk.js","mappings":"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","sources":["company/AddCompany.jsx","js/sendRequest.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"antd\";\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport sendRequest from '../js/sendRequest';\nimport { toast } from 'react-toastify';\n\n\nimport \"./AddCompany.css\";\n\n\n\n\nexport default function () {\n  const history = useHistory();\n  const [value, setValue] = React.useState(null);\n  const [buttonStatus, setButtonStatus] = React.useState(false);\n  const [autoCompleteData, setAutoComplete] = useState();\n\n\n\n\n  useEffect(() => {\n\n    diplayAutocomplete([])\n  }, []);\n\n\n\n\n  // load  data from api \n  async function searchMatchingCompany(e) {\n\n    try {\n      // fetch data \n      let query = e.target.value ? e.target.value.trim() : undefined;\n\n      if (query) {\n        let url = process.env.REACT_APP_API_URL + \"/search_company?query=\" + query;\n        let responseData = await sendRequest.get(url)\n        responseData = JSON.parse(responseData);\n        diplayAutocomplete(responseData.data)\n\n      }\n\n    }\n    catch (error) {\n      console.error(error);\n    };\n  }\n\n  //   display automcomplete list \n  function diplayAutocomplete(data) {\n    // add neccessary fields\n    let nameTable = {}\n    // make unique title for each name  \n    let companyList = data.map((item, idx) => {\n      if (nameTable[item.title] !== undefined) {\n        // add space at end if duplicate to make it unique\n        nameTable[item.title] += \" \";\n        item.title = item.title + nameTable[item.title];\n      } else {\n        nameTable[item.title] = \"\";\n      }\n\n      return item\n    })\n\n    const defaultProps = {\n      options: companyList,\n      getOptionLabel: (option) => option.title,\n    }\n\n    setAutoComplete(<Autocomplete\n      {...defaultProps}\n      id=\"Search-Company\"\n      value={value}\n      onChange={handleChange}\n      onKeyUp={searchMatchingCompany}\n      renderInput={(params) => {\n        return (\n          <TextField {...params} label=\"Search Company\" variant=\"standard\" />\n        )\n      }}\n    />)\n  }\n\n\n\n\n  // Add company \n  async function handleSubmit(e) {\n\n    if (!value) {\n      toast.error(\"Please Select a Company to Add\");\n      return;\n    }\n\n    try {\n\n      setButtonStatus(true)\n      let url = process.env.REACT_APP_API_URL + \"/company\";\n      let param = JSON.stringify(value);\n      let responseData = await sendRequest.post(param, url, \"application/json\");\n      responseData = JSON.parse(responseData);\n      toast.success(responseData.message)\n\n      history.push(\"/company/list\");\n\n    }\n    catch (error) {\n      console.error(error);\n      if (typeof error == 'string') {\n        toast.error(JSON.parse(error).message)\n      } else {\n        toast.error(\"Something Went Wrong\")\n      }\n\n    };\n    setButtonStatus(false);\n  }\n\n  // store data on select \n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n\n\n\n\n\n  return (\n    <div>\n\n\n      <div className=\"ad-lg-mnbx\">\n\n        <div>\n          <div className=\"ad-lg-tl-bx\">\n            <div className=\"ad-lg-tl\"> Add Company  </div>\n\n          </div>\n          <br />\n          <div className=\"ad-lg-inp-bx\">\n            <div className=\"ad-lg-inp-tl\">   </div>\n            {autoCompleteData}\n          </div>\n\n          <br />\n          <br />\n          <br />\n          <Button type=\"primary\" block onClick={handleSubmit} disabled={buttonStatus}>   Submit   </Button>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\n\n","\n\"use strict\" ;\n\nconst  sendRequest  = {\n\n \n  post: (param, url , content_type, options={}) => {\n\n    return new Promise((resolve, reject) => {\n      \n      let defaultOpitons ={\n        isSetHeader : true , \n        defaultContentType: \"application/x-www-form-urlencoded\",\n        ...options,\n      };\n\n      var xhttp = new XMLHttpRequest();\n\n      xhttp.onreadystatechange = function () {\n        if (this.readyState ===4  ) { \n          if(this.status >= 200 && this.status<300){ \n                        \n            resolve( this.response);\n          }\n          else{ \n            reject( this.response);\n          }\n\n        }\n      };\n      xhttp.open(\"POST\", url, true);\n      if (defaultOpitons.isSetHeader) {\n        xhttp.setRequestHeader(\"Content-type\", content_type || defaultOpitons.defaultContentType );\n      }\n            \n      // xhttp.withCredentials = true; // pass along cookies\n      xhttp.send(param);\n    }\n\n    );\n  }\n\n  ,\n \n  delete: (param, url , content_type, options={}) => {\n\n    return new Promise((resolve, reject) => {\n      \n      let defaultOpitons ={\n        isSetHeader : true , \n        defaultContentType: \"application/x-www-form-urlencoded\",\n        ...options,\n      };\n\n      var xhttp = new XMLHttpRequest();\n\n      xhttp.onreadystatechange = function () {\n        if (this.readyState ===4  ) { \n          if(this.status >= 200 && this.status<300){ \n                        \n            resolve( this.response);\n          }\n          else{ \n            reject( this.response);\n          }\n\n        }\n      };\n      xhttp.open(\"DELETE\", url, true);\n      if (defaultOpitons.isSetHeader) {\n        xhttp.setRequestHeader(\"Content-type\", content_type || defaultOpitons.defaultContentType );\n      }\n            \n      // xhttp.withCredentials = true; // pass along cookies\n      xhttp.send(param);\n    }\n\n    );\n  }\n\n  ,\n  get: ( url) => {\n\n    return new Promise((resolve, reject) => {\n \n      var xhttp = new XMLHttpRequest();\n\n      xhttp.onreadystatechange = function () {\n        if (this.readyState ===4  ) {\n          // console.log( this.status); \n          if(this.status >= 200 && this.status<300){ \n                    \n            resolve( this.response);\n          }\n          else{ \n            reject( this.response);\n          }\n\n        }\n      };\n      xhttp.open(\"GET\", url, true);\n     \n      // xhttp.withCredentials = true; // pass along cookies\n       \n      xhttp.send();\n    }\n\n    );\n  }\n\n};\nexport default  sendRequest ;  "],"names":["history","useHistory","React","value","setValue","buttonStatus","setButtonStatus","useState","autoCompleteData","setAutoComplete","searchMatchingCompany","e","query","target","trim","undefined","url","process","sendRequest","responseData","diplayAutocomplete","JSON","parse","data","console","error","nameTable","defaultProps","options","map","item","idx","title","getOptionLabel","option","Autocomplete","id","onChange","handleChange","onKeyUp","renderInput","params","TextField","label","variant","toast","param","stringify","message","push","event","newValue","useEffect","className","type","block","onClick","disabled","post","content_type","Promise","resolve","reject","defaultOpitons","isSetHeader","defaultContentType","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","response","open","setRequestHeader","send","delete","get"],"sourceRoot":""}